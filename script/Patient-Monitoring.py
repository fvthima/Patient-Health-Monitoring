# -*- coding: utf-8 -*-
"""faiza_lab5

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14AMVvGClyaomHqIPL1HGgWPMWxlY-psp
"""

!pip install hmmlearn
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from hmmlearn import hmm

# Define the state space
states = ['Normal', 'Hypoglycemia', 'Hyperglycemia']
n_states = len(states)

# Define the initial state distribution
start_probability = np.array([0.8, 0.1, 0.0])

# Define the state transition probabilities
transition_probability = np.array([
    [0.8, 0.2, 0.0],
    [0.0, 0.6, 0.4],
    [0.0, 0.0, 1.0]
])

# Define the observation likelihoods based on blood glucose ranges
# Normal: 70-100 mg/dL, Hypoglycemia: Below 60 mg/dL, Hyperglycemia: Above 100 mg/dL
emission_probability = np.array([
    [0.0, 1.0, 0.0],   # Normal state
    [0.0, 0.0, 1.0],   # Hypoglycemia state
    [0.0, 0.0, 1.0]    # Hyperglycemia state
])

# Initialize the model
model = hmm.CategoricalHMM(n_components=n_states, n_iter=100)
model.startprob_ = start_probability
model.transmat_ = transition_probability
model.emissionprob_ = emission_probability

# Function to map blood glucose levels to hidden states
def map_glucose_level_to_state(glucose_level):
    if glucose_level >= 100:
        return 2  # Hyperglycemia
    elif glucose_level >= 70:
        return 0  # Normal
    else:
        return 1  # Hypoglycemia

# Function to predict health states based on new glucose levels
def predict_health_state(glucose_levels):
    hidden_states = [map_glucose_level_to_state(level) for level in glucose_levels]
    return hidden_states

# Example usage:
glucose_levels = [85, 110, 65, 40]  # blood glucose levels
predicted_states = predict_health_state(glucose_levels)

print("Glucose Levels:", glucose_levels)
print("Most likely hidden states:", predicted_states)

# Plot the results
sns.set_style("darkgrid")
time_steps = np.arange(len(glucose_levels))
plt.figure(figsize=(10, 6))
plt.plot(time_steps, predicted_states, '-o', label="Predicted State", color='blue', marker='o', linestyle='-')
plt.yticks(ticks=np.arange(n_states), labels=states)
plt.xlabel('Time step')
plt.ylabel('Health State')
plt.title('Predicted Health States Over Time')
plt.legend()
plt.tight_layout()
plt.show()

# Function to map state indices to meaningful labels
def map_states_to_labels(states):
    state_labels = ["Normal", "Hypoglycemia", "Hyperglycemia"]
    return [state_labels[state] for state in states]

# Map predicted states to labels
predicted_labels = map_states_to_labels(predicted_states)
print("Predicted health states:", predicted_labels)